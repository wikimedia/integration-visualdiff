'use strict';

var _webpage = require('webpage');

var _webpage2 = _interopRequireDefault(_webpage);

var _system = require('system');

var _system2 = _interopRequireDefault(_system);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var page = _webpage2.default.create();

var objectSpace = {
    phantom: phantom,
    page: page
};

var haveCallbacks = ['open', 'includeJs'];

var commands = {
    createPage: function createPage(command) {
        completeCommand(command);
    },
    exit: function exit(command) {
        if (command.target === 'phantom') {
            phantom.exit();
        }
    },
    property: function property(command) {
        if (command.target === 'page') {
            if (command.params.length == 2) {
                page[command.params[0]] = command.params[1];
            } else {
                command.response = page[command.params[0]];
            }

            completeCommand(command);
        }
    },
    setting: function setting(command) {
        if (command.target === 'page') {
            if (command.params.length == 2) {
                page.settings[command.params[0]] = command.params[1];
            } else {
                command.response = page.settings[command.params[0]];
            }

            completeCommand(command);
        }
    }
};

function read() {
    var line = _system2.default.stdin.readLine();
    if (line) {
        var command = JSON.parse(line);
        executeCommand(command);
    }
}

function executeCommand(command) {
    if (commands[command.name]) {
        return commands[command.name](command);
    } else if (objectSpace[command.target]) {
        var target = objectSpace[command.target];
        var method = target[command.name];

        if (haveCallbacks.indexOf(command.name) === -1) {
            command.response = method.apply(target, command.params);
            completeCommand(command);
        } else {
            var params = command.params.slice();
            params.push(function (status) {
                command.response = status;
                completeCommand(command);
            });
            method.apply(target, params);
        }
    }
}

function completeCommand(command) {
    _system2.default.stdout.writeLine('>' + JSON.stringify(command));
    read();
}

read();