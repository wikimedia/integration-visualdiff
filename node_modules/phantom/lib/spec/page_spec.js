'use strict';

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _phantom = require('../phantom');

var _phantom2 = _interopRequireDefault(_phantom);

var _page = require('../page');

var _page2 = _interopRequireDefault(_page);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Page', function () {
    var server = undefined;
    var phantom = undefined;
    beforeAll(function (done) {
        server = _http2.default.createServer(function (request, response) {
            if (request.url === '/script.js') {
                response.end('window.fooBar = 2;');
            } else {
                response.end('hi, ' + request.url);
            }
        });
        server.listen(8888, done);
    });

    afterAll(function () {
        return server.close();
    });
    beforeEach(function () {
        return phantom = new _phantom2.default();
    });
    afterEach(function () {
        return phantom.exit();
    });

    it('#open() a valid page', function (done) {
        phantom.createPage().then(function (page) {
            page.open('http://localhost:8888/test').then(function (status) {
                expect(status).toEqual('success');
                done();
            });
        });
    });

    it('#property(\'plainText\') returns valid content', function (done) {
        phantom.createPage().then(function (page) {
            page.open('http://localhost:8888/test').then(function (status) {
                page.property('plainText').then(function (content) {
                    expect(content).toEqual('hi, /test');
                    done();
                });
            });
        });
    });

    it('#property(\'key\', value) sets property', function (done) {
        phantom.createPage().then(function (page) {
            page.property('viewportSize', { width: 800, height: 600 }).then(function () {
                page.property('viewportSize').then(function (value) {
                    expect(value).toEqual({ width: 800, height: 600 });
                    done();
                });
            });
        });
    });

    it('#setting(\'javascriptEnabled\') returns true', function (done) {
        phantom.createPage().then(function (page) {
            page.setting('javascriptEnabled').then(function (value) {
                expect(value).toEqual(true);
                done();
            });
        });
    });

    it('#setting(\'key\', value) sets setting', function (done) {
        phantom.createPage().then(function (page) {
            page.setting('javascriptEnabled', false);
            page.setting('javascriptEnabled').then(function (value) {
                expect(value).toEqual(false);
                done();
            });
        });
    });

    it('#evaluate(function(){...}) executes correctly', function (done) {
        phantom.createPage().then(function (page) {
            page.evaluate(function () {
                return 'test';
            }).then(function (response) {
                expect(response).toEqual('test');
                done();
            });
        });
    });

    it('#injectJs() properly injects a js file', function (done) {
        phantom.createPage().then(function (page) {
            page.open('http://localhost:8888/test').then(function (status) {
                // inject_example.js: window.foo = 1;
                page.injectJs(__dirname + '/inject_example.js').then(function () {
                    page.evaluate(function () {
                        return foo;
                    }).then(function (response) {
                        expect(response).toEqual(1);
                        done();
                    });
                });
            });
        });
    });

    it('#includeJs() properly injects a js file', function (done) {
        phantom.createPage().then(function (page) {
            page.open('http://localhost:8888/test').then(function (status) {
                page.includeJs('http://localhost:8888/script.js').then(function () {
                    page.evaluate(function () {
                        return fooBar;
                    }).then(function (response) {
                        expect(response).toEqual(2);
                        done();
                    });
                });
            });
        });
    });
});